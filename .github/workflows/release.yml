name: CI (Release)

on:
  push:
    tags:
      - "v*"

jobs:
  test-again:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        node_version:
          - current
          - lts/*
    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
        if: runner.os == 'Windows'
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}
          cache: yarn
      - name: Install dependencies
        run: yarn install
      - uses: actions/cache@v3
        id: build-cache
        with:
          path: dist
          key: ${{ runner.os }}-${{ matrix.node_version }}-build-${{ github.sha }}}
        if: runner.os == 'Linux' && matrix.node_version == 'lts/*'
      - name: Build package
        run: yarn build
      - name: Run tests
        run: yarn test:ci
        env:
          NODE_OPTIONS: --enable-source-maps
  release:
    runs-on: ubuntu-latest
    needs:
      - test-again
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: yarn install
      - uses: actions/cache@v3
        id: build-cache
        with:
          path: dist
          key: ${{ runner.os }}-lts/*-build-${{ github.sha }}
      - name: Build package
        run: "[[ -f dist/main.js ]] || yarn build"
      - name: Prepare to publish
        run: |
          cat > ~/.npmrc <<EOF
          //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
          registry=https://registry.npmjs.org/
          always-auth=true
          EOF
      - name: Publish module
        run: yarn publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Create a Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # The name of the tag. This should come from the webhook payload, `github.GITHUB_REF` when a user pushes a new tag
          tag_name: ${{ github.ref }}
          # The name of the release. For example, `Release v1.0.1`
          release_name: Release ${{ github.ref }}
